data[data$Ozone == 41]
data[,Ozone[]]
subset(data, Ozone = 41)
subset(data, Ozone == 41)
subset(data, Ozone > 31 && Temp > 90)
subset(data, Temp > 90)
subset(data, Ozone > 31 & Temp > 90)
x = subset(data, Ozone > 31 & Temp > 90)
x
mean(x[,Solar.R])
mean(x[,"Solar.R])
""
)
]
"])
mean(x[,"Solar.R"])
x = subset(data, Month == 6)
x
mean(x[,"Temp"])
x = subset(data, Month == 5)
x
max(x[,"Ozone"])
x[,"Ozone"]
x[,"Ozone",na.rm=T]
max(x[,"Ozone"], na.rm = T)
above <- function(x, y = 10) {
use <- x > y
x[use]
}
above(1:50)
add <- function(test1, app) {
test1 + app
}
add(app=1, tes=2)
add(app=1, 2)
add <- function(test1, app) {
print(test1)
print(app)
}
add(app=1, 2)
add(app=1, tes=2)
cube <- function(x, n) { x^3 }
cube(3)
x <- 1:10
if(x > 5) {
x <- 0}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
system.time()
system.time(letters)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
rep(0:1, each = 5)
library(swirl)
swirl()
head(flags)
dim(flags)
play()
str(flags)
names(flags)
flags$name
flags["name",]
flags[."name"]
flags[,"name"]
nxt()
class(flagts)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cbind(flags$name, as.character(cls_list))
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,
unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
Use table(flags$animate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 19)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace=TRUE, prob = c(0.3, 0.7) )
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass()
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(y=cars$speed, x=cars$dist)
plot(x=cars$speed, y=cars$dist, xlab = "Speed")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, slim=c(10,15))
plot(cars, xlim = c(10, 15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
exit
quit()
source('~/datasciencecoursera/R programming/cachematrix.R')
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
> cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
source('~/datasciencecoursera/R programming/cachematrix.R')
library(xlsx)
library(rJava)
library(rJava)
library(rJava)
Sys.getenv("JAVA_HOME")
install.packages("xlsxjars")
library(xlsx)
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_40')
library(xlsx)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
rows <- 18:23
cols <- 7:15
dat <- read.xlsx("url", sheetIndex = 1, colIndex = cols, rowIndex = rows)
dat <- read.xlsx(url, sheetIndex = 1, colIndex = cols, rowIndex = rows)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_40')
library(xlsx)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
destf = "./getdata-data-DATA.gov_NGAP.xlsx"
download.file(url, destfile = destf)
rows <- 18:23
cols <- 7:15
dat <- read.xlsx(destf, sheetIndex = 1, colIndex = cols, rowIndex = rows)
dat <- read.xlsx(destf, colIndex = cols, rowIndex = rows)
dat <- read.xlsx(destf, 1, colIndex = cols, rowIndex = rows)
setwd("~/datasciencecoursera/Getting and Cleaning Data")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
destf = "./getdata-data-ss06hid.csv"
download.file(url, destfile = destf)
data <- read.table(destf, sep = ",", header = TRUE)
sum(data$VAL==24, na.rm=TRUE)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_40')
library(xlsx)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
destf = "./getdata-data-DATA.gov_NGAP.xlsx"
download.file(url, destfile = destf)
rows <- 18:23
cols <- 7:15
dat <- read.xlsx(destf, 1, colIndex = cols, rowIndex = rows)
download.file(url, destfile = destf, mode = "wb")
dat <- read.xlsx(destf, 1, colIndex = cols, rowIndex = rows)
sum(dat$Zip*dat$Ext,na.rm=T)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlInternalTreeParse(url)
library(XML)
install.packages("XML")
library(XML)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlInternalTreeParse(url)
doc <- xmlTreeParse(url)
library(RCurl)
doc <- xmlTreeParse(url, useInternal=TRUE)
library(XML)
library(RCurl)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(url, useInternal=TRUE)
destf = "./getdata-data-restaurants.xml"
download.file(url, destfile = destf, mode = "wb")
doc <- xmlTreeParse(destf, useInternal=TRUE)
rootNode <- xmlRoot(doc)
names(rootNode)
zipcode <- xpathSApply(rootNode, "//zipcode", xmlValue)
table(zipcode == 21231)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
destf = "./getdata-data-ss06pid.csv"
download.file(url, destfile = destf, mode = "wb")
DT <- fread(destf)
timing <- function(y, t) {
message(sprintf("Elapsed time: %.10f", t[3]))
print(y)
}
install.packages("data.table")
library(data.table)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
destf = "./getdata-data-ss06pid.csv"
download.file(url, destfile = destf, mode = "wb")
DT <- fread(destf)
timing <- function(y, t) {
message(sprintf("Elapsed time: %.10f", t[3]))
print(y)
}
t <- system.time(y <- sapply(split(DT$pwgtp15, DT$SEX), mean))
timing(y, t)
t <- system.time(y <- rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
timing(y, t)
t <- system.time(y <- (rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]))
timing(y, t)
t <- system.time(y <- {(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])})
timing(y, t)
t <- system.time(y <- rowMeans(DT)[DT$SEX==1]) + system.time(rowMeans(DT)[DT$SEX==2])
timing(y, t)
t <- system.time(y <- sapply(split(DT$pwgtp15, DT$SEX), mean))
timing(y, t)
t <- system.time(y <- mean(DT$pwgtp15,by=DT$SEX))
timing(y, t)
t <- system.time(y <- DT[,mean(pwgtp15),by=SEX])
timing(y, t)
system.time(y <- sapply(split(DT$pwgtp15, DT$SEX), mean))
DT <- fread(destf, sep=",")
system.time(y <- tapply(DT$pwgtp15,DT$SEX,mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(rowMeans(DT)[DT$SEX==1]) + system.time(rowMeans(DT)[DT$SEX==2])
system.time(sapply(split(DT$pwgtp15, DT$SEX), mean))
## Q1
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "2bef336b7acd4abfc7bb")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
q
)
q
quit
/
## Q1
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
myapp <- oauth_app("github", "2bef336b7acd4abfc7bb", "296ec110c2046c5183c48b55886b93f0a5b7ad9c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("github", "2bef336b7acd4abfc7bb", "296ec110c2046c5183c48b55886b93f0a5b7ad9c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
## Q1
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "2bef336b7acd4abfc7bb", secret = "296ec110c2046c5183c48b55886b93f0a5b7ad9c")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
## Q1
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "2bef336b7acd4abfc7bb", secret = "296ec110c2046c5183c48b55886b93f0a5b7ad9c")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
## Q1
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "2bef336b7acd4abfc7bb", secret = "296ec110c2046c5183c48b55886b93f0a5b7ad9c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("github", "2bef336b7acd4abfc7bb", secret = "296ec110c2046c5183c48b55886b93f0a5b7ad9c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
source('~/datasciencecoursera/Getting and Cleaning Data/Quiz2.R')
req <- GET("https://api.github.com/rate_limit", gtoken)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
source('~/datasciencecoursera/Getting and Cleaning Data/Quiz2.R')
source('~/datasciencecoursera/Getting and Cleaning Data/Quiz2.R')
library(httr)
require(httpuv)
require(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("Week2Quiz", "2bef336b7acd4abfc7bb", secret = "296ec110c2046c5183c48b55886b93f0a5b7ad9c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
list(output[[4]]$name, output[[4]]$created_at)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
setwd("~/datasciencecoursera/Getting and Cleaning Data")
library(sqldf)
install.packages("SQLDF")
install.packages("sqldf")
library(sqldf)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
destf = "./getdata-data-ss06pid.csv"
download.file(url, destfile = destf)
acs <- read.csv(destf, header=T, sep=",")
sqldf("select pwgtp1 from acs where AGEP < 50")
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
conn <- url(url)
htmlCode <- readLines(conn)
close(con)
sapply(htmlCode[c(10, 20, 30, 100)], nchar)
url <- "httpshttps://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
destf = "./getdata-wksst8110.for"
download.file(url, destfile = destf)
data <- read.csv(destf, header = TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
destf = "./getdata-wksst8110.for"
download.file(url, destfile = destf)
data <- read.csv(destf, header = TRUE)
df <- read.fwf(file=destf,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
sum(df[, 4])
setwd("~/datasciencecoursera/Getting and Cleaning Data")
## Q1
library(httr)
require(httpuv)
require(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("Week2Quiz", "2bef336b7acd4abfc7bb", secret = "296ec110c2046c5183c48b55886b93f0a5b7ad9c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
BROWSE(url,authenticate("Access Token","x-oauth-basic","basic"))
output
names(output)
dim(output)
output
head(output)
output[output$created_at,]
output[output$created_at]
list(output[[1]]$name, output[[1]]$created_at)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
